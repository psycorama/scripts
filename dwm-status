#!/bin/bash
#
# this skript should be put into $HOME/.dwm-status
# or whatever your local dwm is executing...
# don't forget to configure 
DELAY=5
max_ram=`expr $(grep MemTotal /proc/meminfo |sed -e 's/[a-zA-Z: ]//g') `;

####
# battery information will only be read at script startup
##
rate=0;
full=100
maxfull=100
if [ -e /Msys/class/power_supply/BAT0/energy_full ]; then
    full=$[ `cat /sys/class/power_supply/BAT0/energy_full` / 1000 ];
fi
if [ -e /sys/class/power_supply/BAT0/energy_full_design ]; then
    maxfull=$[ `cat /sys/class/power_supply/BAT0/energy_full_design` / 1000 ];
fi

####
# trying to find correct temp/fan files
##
max_num=0
hw_path=""

for i in $(ls -d /sys/class/hwmon/* /sys/class/hwmon/*/device ); do
    cur_num=$(ls -1 $i/{temp,fan}*_{label,input} |wc -l)
    if [ $cur_num -gt $max_num ];then
	max_num=$cur_num
	hw_path="$i"
    fi
done

# debug
#echo "using: $hw_path"

# storing temps to array
n=0;
for i in $(ls $hw_path/temp*_input); do
    if [ -e $i ]; then
	CPUTEMP_LOCATION[n]="$i"
	i_quer=$(echo $i|sed -e 's/_input/_label/')
	if [ -e $i_quer ]; then
	    CPULABEL_LOCATION[n]="$i_quer"
	fi
	n=$(($n+1))
    fi
done

#debug
# n=0;
# while [ $n -lt ${#CPUTEMP_LOCATION[@]} ]; do
#      cat ${CPULABEL_LOCATION[$n]}|cut -d ' ' -f 1
#      cat ${CPUTEMP_LOCATION[$n]}
#      n=$(($n+1))
# done
# exit 1

# fans
n=0
for i in $(ls $hw_path/fan*_input); do
    if [ -e $i ]; then
	FAN_LOCATION[n]="$i"
	i_quer=$(echo $i|sed -e 's/_input/_label/')
	if [ -e $i_quer ]; then
	    FANLABEL_LOCATION[n]="$i_quer"
	fi
	n=$(($n+1))
    fi
done

#debug
# n=0
# while [ $n -lt ${#FAN_LOCATION[@]} ]; do
#     cat ${FANLABEL_LOCATION[$n]}|cut -d ' ' -f 1
#     cat ${FAN_LOCATION[$n]}
#     n=$(($n+1))
# done
# exit 1

####
# speedometer
##
n=0
for i in $(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_frequencies); do
    freq_avail[$n]=$(($i))
    n=$((n+1));
done
n=1
while [ $n -lt ${#freq_avail[@]} ]; do
#    len=${#freq_avail[@]}
#    pos=$[ $len - $n ]
    heisenberg[$((n-1))]=${freq_avail[$((${#freq_avail[@]}-$n))]}
    n=$((n+1))
done

while [ $n -le 7 ]; do
    heisenberg[$n]=${freq_avail[0]}
    n=$((n+1))
done
if [ $n -gt 7 ]; then
    heisenberg[6]=${freq_avail[0]}
fi


####
# starting to loop
##
while true; do
    n=0
    cputemp=""
    while [ $n -lt ${#CPUTEMP_LOCATION[@]} ]; do
	if [ -n ${CPULABEL_LOCATION[$n]} ]; then
	    cputemp="$cputemp $(cat ${CPULABEL_LOCATION[$n]} | cut -d ' ' -f 1): "
	fi
	cputemp="$cputemp $(cat ${CPUTEMP_LOCATION[$n]} | cut -c 1-2)Â°C |"
	n=$((n+1))
    done

    n=0
    fan=""
    while [ $n -lt ${#FAN_LOCATION[@]} ]; do
	fan="$fan $(cat ${FANLABEL_LOCATION[$n]} | cut -d ' ' -f 1 ): "
	fan="$fan $(cat ${FAN_LOCATION[$n]} )RPM |"
	n=$((n+1))
    done
    # disabled, because of massiv output to syslog
    #gputemp=$(nvclock -T|tail -1| sed -e 's/.*:\ //');


    speed=$(cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq)
    # use the different speedometers for indicating cpu-speed
    case $speed in 
	${heisenberg[6]})
	    speedo="[ ._]" ;;
	${heisenberg[5]})
	    speedo="[ .-]" ;;
	${heisenberg[4]})
	    speedo="[ ./]" ;;
	${heisenberg[3]})
	    speedo="[ | ]" ;;
	${heisenberg[2]})
	    speedo="[\. ]" ;;
	${heisenberg[1]})
	    speedo="[-. ]" ;;
	${heisenberg[0]})
	    speedo="[_. ]" ;;
	* )
	    speedo="[ * ]" ;;
    esac

    #
    # battery/power based information
    if [ -e /sys/class/power_supply/AC/online ]; then
	if [ "$(cat /sys/class/power_supply/AC/onlhine)" == "1" ]; then
	    p_icon='+';
	else
	    p_icon='-';
	fi;
    fi
    if [ -e /sys/class/power_supply/BAT0/present ] ; then
	bat=$[ `cat /sys/class/power_supply/BAT0/energy_now` / 1000];
	perc=$[ $bat * 100 / $full ];
	maxp=$[ $bat * 100 / $maxfull ];

	n_rate=$[ `cat /sys/class/power_supply/BAT0/power_now` / 1000 ];
	# triple the speed of the pentium
	rate=$(( $(( ($rate * 3 )+ $n_rate )) / 4 ));

	if [ $rate -ne 0 ]; then
	    if [ "$p_icon" == "-" ]; then
		h=$[ $bat / $rate ];
		m=$(( ($bat *60 / $rate) % 60 ));
	    else
		h=$[ ($full - $bat ) / $rate ];
		m=$[ ( ($full - $bat) * 60 / $rate) % 60 ];
	    fi;
	else
	    h=99; m=59;
	fi;
	battery_status=`printf "%2d.%1dW | %3d%%[%3d%%] | %1d:%02d " $[ $rate/1000] $[ $rate%1000/100]  $perc $maxp $h $m` 
    else
	rate=0
	bat=0
	battery_status=$(echo " no batt")
    fi

    # calculate some stats about RAM usage: "used[ buffered, cached]" (in %)
    free_ram=$(grep MemFree /proc/meminfo |sed -e 's/[a-zA-Z: ]//g');
    buff_ram=$(grep Buffers /proc/meminfo |sed -e 's/[a-zA-Z: ]//g');
    cache_ram=$(grep ^Cache /proc/meminfo |sed -e 's/[a-zA-Z: ]//g');
    free_perc=$(( $free_ram * 100/ $max_ram ));
    buff_perc=$(( $buff_ram * 100/ $max_ram )) ; 
    cache_perc=$(( $cache_ram * 100/ $max_ram )) ;	
    used_perc=$(( 100 - $free_perc ));

#
# collection of informations complete, print it to xsetroot
#
    xsetroot -name "`date \"+%a %b %e %R\"` | `echo "$speedo"` | \
$(printf "RAM:%2d%%[%2d%%,%2d%%]" $used_perc $buff_perc $cache_perc) | \
$(echo $p_icon$battery_status) | $(echo $cputemp $fan)";
# reserved for later use
#CPU:"`echo $cputemp` GPU:`echo $gputemp` | Fan: `echo $fan`";

    sleep $DELAY
done
